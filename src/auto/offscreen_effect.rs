// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use super::ActorMeta;
use super::Effect;
use super::Rect;

glib_wrapper! {
    pub struct OffscreenEffect(Object<ffi::ClutterOffscreenEffect, ffi::ClutterOffscreenEffectClass, OffscreenEffectClass>) @extends Effect, ActorMeta;

    match fn {
        get_type => || ffi::clutter_offscreen_effect_get_type(),
    }
}

pub const NONE_OFFSCREEN_EFFECT: Option<&OffscreenEffect> = None;

pub trait OffscreenEffectExt: 'static {
    //fn create_texture(&self, width: f32, height: f32) -> /*Unimplemented*/Option<cogl::Handle>;

    fn get_target_rect(&self) -> Option<Rect>;

    //fn get_texture(&self) -> /*Unimplemented*/Option<cogl::Handle>;

    fn paint_target(&self);
}

impl<O: IsA<OffscreenEffect>> OffscreenEffectExt for O {
    //fn create_texture(&self, width: f32, height: f32) -> /*Unimplemented*/Option<cogl::Handle> {
    //    unsafe { TODO: call clutter_sys:clutter_offscreen_effect_create_texture() }
    //}

    fn get_target_rect(&self) -> Option<Rect> {
        unsafe {
            let mut rect = Rect::uninitialized();
            let ret = from_glib(ffi::clutter_offscreen_effect_get_target_rect(
                self.as_ref().to_glib_none().0,
                rect.to_glib_none_mut().0,
            ));
            if ret {
                Some(rect)
            } else {
                None
            }
        }
    }

    //fn get_texture(&self) -> /*Unimplemented*/Option<cogl::Handle> {
    //    unsafe { TODO: call clutter_sys:clutter_offscreen_effect_get_texture() }
    //}

    fn paint_target(&self) {
        unsafe {
            ffi::clutter_offscreen_effect_paint_target(self.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for OffscreenEffect {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "OffscreenEffect")
    }
}

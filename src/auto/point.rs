// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use std::mem;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Point(Boxed<ffi::ClutterPoint>);

    match fn {
        copy => |ptr| ffi::clutter_point_copy(mut_override(ptr)),
        free => |ptr| ffi::clutter_point_free(ptr),
        get_type => || ffi::clutter_point_get_type(),
    }
}

impl Point {
    pub fn alloc() -> Point {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::clutter_point_alloc()) }
    }

    pub fn distance(&self, b: &Point) -> (f32, f32, f32) {
        unsafe {
            let mut x_distance = mem::MaybeUninit::uninit();
            let mut y_distance = mem::MaybeUninit::uninit();
            let ret = ffi::clutter_point_distance(
                self.to_glib_none().0,
                b.to_glib_none().0,
                x_distance.as_mut_ptr(),
                y_distance.as_mut_ptr(),
            );
            let x_distance = x_distance.assume_init();
            let y_distance = y_distance.assume_init();
            (ret, x_distance, y_distance)
        }
    }

    pub fn equals(&self, b: &Point) -> bool {
        unsafe {
            from_glib(ffi::clutter_point_equals(
                self.to_glib_none().0,
                b.to_glib_none().0,
            ))
        }
    }

    pub fn init(&mut self, x: f32, y: f32) -> Option<Point> {
        unsafe {
            from_glib_none(ffi::clutter_point_init(
                self.to_glib_none_mut().0,
                x,
                y,
            ))
        }
    }

    pub fn zero() -> Option<Point> {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::clutter_point_zero()) }
    }
}

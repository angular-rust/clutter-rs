// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use gobject_sys;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Matrix(Boxed<ffi::ClutterMatrix>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(ffi::clutter_matrix_get_type(), ptr as *mut _) as *mut ffi::ClutterMatrix,
        free => |ptr| gobject_sys::g_boxed_free(ffi::clutter_matrix_get_type(), ptr as *mut _),
        get_type => || ffi::clutter_matrix_get_type(),
    }
}

impl Matrix {
    //pub fn init_from_array(&mut self, values: /*Unimplemented*/FixedArray TypeId { ns_id: 0, id: 20 }; 16) -> Option<Matrix> {
    //    unsafe { TODO: call clutter_sys:clutter_matrix_init_from_array() }
    //}

    pub fn init_from_matrix(&mut self, b: &Matrix) -> Option<Matrix> {
        unsafe {
            from_glib_none(ffi::clutter_matrix_init_from_matrix(
                self.to_glib_none_mut().0,
                b.to_glib_none().0,
            ))
        }
    }

    pub fn init_identity(&mut self) -> Option<Matrix> {
        unsafe { from_glib_none(ffi::clutter_matrix_init_identity(self.to_glib_none_mut().0)) }
    }

    pub fn alloc() -> Option<Matrix> {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::clutter_matrix_alloc()) }
    }
}

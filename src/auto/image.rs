// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use super::Content;
use cogl;
use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib_wrapper! {
    pub struct Image(Object<ffi::ClutterImage, ffi::ClutterImageClass, ImageClass>) @implements Content;

    match fn {
        get_type => || ffi::clutter_image_get_type(),
    }
}

pub const NONE_IMAGE: Option<&Image> = None;

pub trait ImageExt: 'static {
    //fn set_area(&self, data: &[u8], pixel_format: cogl::PixelFormat, rect: &cairo::RectangleInt, row_stride: u32) -> Result<(), glib::Error>;

    fn set_bytes(
        &self,
        data: &glib::Bytes,
        pixel_format: cogl::PixelFormat,
        width: u32,
        height: u32,
        row_stride: u32,
    ) -> Result<(), glib::Error>;

    //fn set_data(&self, data: &[u8], pixel_format: cogl::PixelFormat, width: u32, height: u32, row_stride: u32) -> Result<(), glib::Error>;
}

impl<O: IsA<Image>> ImageExt for O {
    //fn set_area(&self, data: &[u8], pixel_format: cogl::PixelFormat, rect: &cairo::RectangleInt, row_stride: u32) -> Result<(), glib::Error> {
    //    unsafe { TODO: call clutter_sys:clutter_image_set_area() }
    //}

    fn set_bytes(
        &self,
        data: &glib::Bytes,
        pixel_format: cogl::PixelFormat,
        width: u32,
        height: u32,
        row_stride: u32,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::clutter_image_set_bytes(
                self.as_ref().to_glib_none().0,
                data.to_glib_none().0,
                pixel_format.to_glib(),
                width,
                height,
                row_stride,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //fn set_data(&self, data: &[u8], pixel_format: cogl::PixelFormat, width: u32, height: u32, row_stride: u32) -> Result<(), glib::Error> {
    //    unsafe { TODO: call clutter_sys:clutter_image_set_data() }
    //}
}

impl fmt::Display for Image {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Image")
    }
}

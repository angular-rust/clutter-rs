// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use super::Actor;
use super::ActorMeta;
use super::AlignAxis;
use super::Constraint;

glib_wrapper! {
    pub struct AlignConstraint(Object<ffi::ClutterAlignConstraint, ffi::ClutterAlignConstraintClass, AlignConstraintClass>) @extends Constraint, ActorMeta;

    match fn {
        get_type => || ffi::clutter_align_constraint_get_type(),
    }
}

impl AlignConstraint {
    pub fn new<P: IsA<Actor>>(source: Option<&P>, axis: AlignAxis, factor: f32) -> AlignConstraint {
        assert_initialized_main_thread!();
        unsafe {
            Constraint::from_glib_none(ffi::clutter_align_constraint_new(
                source.map(|p| p.as_ref()).to_glib_none().0,
                axis.to_glib(),
                factor,
            ))
            .unsafe_cast()
        }
    }

    pub fn get_align_axis(&self) -> AlignAxis {
        unsafe {
            from_glib(ffi::clutter_align_constraint_get_align_axis(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_factor(&self) -> f32 {
        unsafe { ffi::clutter_align_constraint_get_factor(self.to_glib_none().0) }
    }

    pub fn get_source(&self) -> Option<Actor> {
        unsafe {
            from_glib_none(ffi::clutter_align_constraint_get_source(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_align_axis(&self, axis: AlignAxis) {
        unsafe {
            ffi::clutter_align_constraint_set_align_axis(
                self.to_glib_none().0,
                axis.to_glib(),
            );
        }
    }

    pub fn set_factor(&self, factor: f32) {
        unsafe {
            ffi::clutter_align_constraint_set_factor(self.to_glib_none().0, factor);
        }
    }

    pub fn set_source<P: IsA<Actor>>(&self, source: Option<&P>) {
        unsafe {
            ffi::clutter_align_constraint_set_source(
                self.to_glib_none().0,
                source.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn connect_property_align_axis_notify<F: Fn(&AlignConstraint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_align_axis_trampoline<F: Fn(&AlignConstraint) + 'static>(
            this: *mut ffi::ClutterAlignConstraint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::align-axis\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_align_axis_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_factor_notify<F: Fn(&AlignConstraint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_factor_trampoline<F: Fn(&AlignConstraint) + 'static>(
            this: *mut ffi::ClutterAlignConstraint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::factor\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_factor_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_source_notify<F: Fn(&AlignConstraint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_source_trampoline<F: Fn(&AlignConstraint) + 'static>(
            this: *mut ffi::ClutterAlignConstraint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::source\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_source_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for AlignConstraint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AlignConstraint")
    }
}

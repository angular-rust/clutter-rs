// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use super::ActorBox;

glib_wrapper! {
    pub struct PaintNode(Object<ffi::ClutterPaintNode, ffi::ClutterPaintNodeClass, PaintNodeClass>);

    match fn {
        get_type => || ffi::clutter_paint_node_get_type(),
    }
}

pub const NONE_PAINT_NODE: Option<&PaintNode> = None;

pub trait PaintNodeExt: 'static {
    fn add_child<P: IsA<PaintNode>>(&self, child: &P);

    fn add_rectangle(&self, rect: &ActorBox);

    fn add_texture_rectangle(&self, rect: &ActorBox, x_1: f32, y_1: f32, x_2: f32, y_2: f32);

    fn set_name(&self, name: &str);
}

impl<O: IsA<PaintNode>> PaintNodeExt for O {
    fn add_child<P: IsA<PaintNode>>(&self, child: &P) {
        unsafe {
            ffi::clutter_paint_node_add_child(
                self.as_ref().to_glib_none().0,
                child.as_ref().to_glib_none().0,
            );
        }
    }

    fn add_rectangle(&self, rect: &ActorBox) {
        unsafe {
            ffi::clutter_paint_node_add_rectangle(
                self.as_ref().to_glib_none().0,
                rect.to_glib_none().0,
            );
        }
    }

    fn add_texture_rectangle(&self, rect: &ActorBox, x_1: f32, y_1: f32, x_2: f32, y_2: f32) {
        unsafe {
            ffi::clutter_paint_node_add_texture_rectangle(
                self.as_ref().to_glib_none().0,
                rect.to_glib_none().0,
                x_1,
                y_1,
                x_2,
                y_2,
            );
        }
    }

    fn set_name(&self, name: &str) {
        unsafe {
            ffi::clutter_paint_node_set_name(
                self.as_ref().to_glib_none().0,
                name.to_glib_none().0,
            );
        }
    }
}

impl fmt::Display for PaintNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PaintNode")
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::translate::*;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct Vertex(Boxed<ffi::ClutterVertex>);

    match fn {
        copy => |ptr| ffi::clutter_vertex_copy(mut_override(ptr)),
        free => |ptr| ffi::clutter_vertex_free(ptr),
        get_type => || ffi::clutter_vertex_get_type(),
    }
}

impl Vertex {
    pub fn alloc() -> Vertex {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::clutter_vertex_alloc()) }
    }

    pub fn new(x: f32, y: f32, z: f32) -> Vertex {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::clutter_vertex_new(x, y, z)) }
    }

    fn equal(&self, vertex_b: &Vertex) -> bool {
        unsafe {
            from_glib(ffi::clutter_vertex_equal(
                self.to_glib_none().0,
                vertex_b.to_glib_none().0,
            ))
        }
    }

    pub fn init(&mut self, x: f32, y: f32, z: f32) -> Option<Vertex> {
        unsafe {
            from_glib_none(ffi::clutter_vertex_init(
                self.to_glib_none_mut().0,
                x,
                y,
                z,
            ))
        }
    }
}

impl PartialEq for Vertex {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for Vertex {}

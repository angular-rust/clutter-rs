// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use super::Animatable;
use super::Interval;
use super::Timeline;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Transition(Object<ffi::ClutterTransition, ffi::ClutterTransitionClass, TransitionClass>) @extends Timeline;

    match fn {
        get_type => || ffi::clutter_transition_get_type(),
    }
}

pub const NONE_TRANSITION: Option<&Transition> = None;

pub trait TransitionExt: 'static {
    fn get_animatable(&self) -> Option<Animatable>;

    fn get_interval(&self) -> Option<Interval>;

    fn get_remove_on_complete(&self) -> bool;

    fn set_animatable<P: IsA<Animatable>>(&self, animatable: Option<&P>);

    //fn set_from(&self, value_type: glib::types::Type, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs);

    //fn set_from_value(&self, value: /*Ignored*/&glib::Value);

    fn set_interval<P: IsA<Interval>>(&self, interval: Option<&P>);

    fn set_remove_on_complete(&self, remove_complete: bool);

    //fn set_to(&self, value_type: glib::types::Type, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs);

    //fn set_to_value(&self, value: /*Ignored*/&glib::Value);

    fn connect_property_animatable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_interval_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_remove_on_complete_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<Transition>> TransitionExt for O {
    fn get_animatable(&self) -> Option<Animatable> {
        unsafe {
            from_glib_none(ffi::clutter_transition_get_animatable(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_interval(&self) -> Option<Interval> {
        unsafe {
            from_glib_none(ffi::clutter_transition_get_interval(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_remove_on_complete(&self) -> bool {
        unsafe {
            from_glib(ffi::clutter_transition_get_remove_on_complete(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_animatable<P: IsA<Animatable>>(&self, animatable: Option<&P>) {
        unsafe {
            ffi::clutter_transition_set_animatable(
                self.as_ref().to_glib_none().0,
                animatable.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    //fn set_from(&self, value_type: glib::types::Type, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call clutter_sys:clutter_transition_set_from() }
    //}

    //fn set_from_value(&self, value: /*Ignored*/&glib::Value) {
    //    unsafe { TODO: call clutter_sys:clutter_transition_set_from_value() }
    //}

    fn set_interval<P: IsA<Interval>>(&self, interval: Option<&P>) {
        unsafe {
            ffi::clutter_transition_set_interval(
                self.as_ref().to_glib_none().0,
                interval.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_remove_on_complete(&self, remove_complete: bool) {
        unsafe {
            ffi::clutter_transition_set_remove_on_complete(
                self.as_ref().to_glib_none().0,
                remove_complete.to_glib(),
            );
        }
    }

    //fn set_to(&self, value_type: glib::types::Type, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call clutter_sys:clutter_transition_set_to() }
    //}

    //fn set_to_value(&self, value: /*Ignored*/&glib::Value) {
    //    unsafe { TODO: call clutter_sys:clutter_transition_set_to_value() }
    //}

    fn connect_property_animatable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_animatable_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::ClutterTransition,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Transition>,
        {
            let f: &F = &*(f as *const F);
            f(&Transition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::animatable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_animatable_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_interval_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_interval_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::ClutterTransition,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Transition>,
        {
            let f: &F = &*(f as *const F);
            f(&Transition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_interval_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_remove_on_complete_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_remove_on_complete_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::ClutterTransition,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Transition>,
        {
            let f: &F = &*(f as *const F);
            f(&Transition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::remove-on-complete\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_remove_on_complete_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Transition {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Transition")
    }
}

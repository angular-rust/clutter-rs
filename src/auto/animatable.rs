// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct Animatable(Interface<ffi::ClutterAnimatable>);

    match fn {
        get_type => || ffi::clutter_animatable_get_type(),
    }
}

pub const NONE_ANIMATABLE: Option<&Animatable> = None;

pub trait AnimatableExt: 'static {
    //fn find_property(&self, property_name: &str) -> /*Ignored*/Option<glib::ParamSpec>;

    //fn get_initial_state(&self, property_name: &str, value: /*Ignored*/&mut glib::Value);

    //fn interpolate_value<P: IsA<Interval>>(&self, property_name: &str, interval: &P, progress: f64, value: /*Ignored*/glib::Value) -> bool;

    //fn set_final_state(&self, property_name: &str, value: /*Ignored*/&glib::Value);
}

impl<O: IsA<Animatable>> AnimatableExt for O {
    //fn find_property(&self, property_name: &str) -> /*Ignored*/Option<glib::ParamSpec> {
    //    unsafe { TODO: call clutter_sys:clutter_animatable_find_property() }
    //}

    //fn get_initial_state(&self, property_name: &str, value: /*Ignored*/&mut glib::Value) {
    //    unsafe { TODO: call clutter_sys:clutter_animatable_get_initial_state() }
    //}

    //fn interpolate_value<P: IsA<Interval>>(&self, property_name: &str, interval: &P, progress: f64, value: /*Ignored*/glib::Value) -> bool {
    //    unsafe { TODO: call clutter_sys:clutter_animatable_interpolate_value() }
    //}

    //fn set_final_state(&self, property_name: &str, value: /*Ignored*/&glib::Value) {
    //    unsafe { TODO: call clutter_sys:clutter_animatable_set_final_state() }
    //}
}

impl fmt::Display for Animatable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Animatable")
    }
}

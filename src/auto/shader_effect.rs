// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use super::ActorMeta;
use super::Effect;
use super::OffscreenEffect;
use super::ShaderType;

glib_wrapper! {
    pub struct ShaderEffect(Object<ffi::ClutterShaderEffect, ffi::ClutterShaderEffectClass, ShaderEffectClass>) @extends OffscreenEffect, Effect, ActorMeta;

    match fn {
        get_type => || ffi::clutter_shader_effect_get_type(),
    }
}

impl ShaderEffect {
    pub fn new(shader_type: ShaderType) -> ShaderEffect {
        assert_initialized_main_thread!();
        unsafe {
            Effect::from_glib_none(ffi::clutter_shader_effect_new(
                shader_type.to_glib(),
            ))
            .unsafe_cast()
        }
    }
}

pub const NONE_SHADER_EFFECT: Option<&ShaderEffect> = None;

pub trait ShaderEffectExt: 'static {
    //fn get_program(&self) -> /*Unimplemented*/Option<cogl::Handle>;

    //fn get_shader(&self) -> /*Unimplemented*/Option<cogl::Handle>;

    fn set_shader_source(&self, source: &str) -> bool;

    //fn set_uniform(&self, name: &str, gtype: glib::types::Type, n_values: usize, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs);

    //fn set_uniform_value(&self, name: &str, value: /*Ignored*/&glib::Value);
}

impl<O: IsA<ShaderEffect>> ShaderEffectExt for O {
    //fn get_program(&self) -> /*Unimplemented*/Option<cogl::Handle> {
    //    unsafe { TODO: call clutter_sys:clutter_shader_effect_get_program() }
    //}

    //fn get_shader(&self) -> /*Unimplemented*/Option<cogl::Handle> {
    //    unsafe { TODO: call clutter_sys:clutter_shader_effect_get_shader() }
    //}

    fn set_shader_source(&self, source: &str) -> bool {
        unsafe {
            from_glib(ffi::clutter_shader_effect_set_shader_source(
                self.as_ref().to_glib_none().0,
                source.to_glib_none().0,
            ))
        }
    }

    //fn set_uniform(&self, name: &str, gtype: glib::types::Type, n_values: usize, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call clutter_sys:clutter_shader_effect_set_uniform() }
    //}

    //fn set_uniform_value(&self, name: &str, value: /*Ignored*/&glib::Value) {
    //    unsafe { TODO: call clutter_sys:clutter_shader_effect_set_uniform_value() }
    //}
}

impl fmt::Display for ShaderEffect {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ShaderEffect")
    }
}

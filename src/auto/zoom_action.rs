// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use super::Action;
use super::Actor;
use super::ActorMeta;
use super::GestureAction;
use super::Point;
use super::ZoomAxis;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct ZoomAction(Object<ffi::ClutterZoomAction, ffi::ClutterZoomActionClass, ZoomActionClass>) @extends GestureAction, Action, ActorMeta;

    match fn {
        get_type => || ffi::clutter_zoom_action_get_type(),
    }
}

impl ZoomAction {
    pub fn new() -> ZoomAction {
        assert_initialized_main_thread!();
        unsafe { Action::from_glib_none(ffi::clutter_zoom_action_new()).unsafe_cast() }
    }
}

impl Default for ZoomAction {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_ZOOM_ACTION: Option<&ZoomAction> = None;

pub trait ZoomActionExt: 'static {
    fn get_focal_point(&self) -> Point;

    fn get_transformed_focal_point(&self) -> Point;

    fn get_zoom_axis(&self) -> ZoomAxis;

    fn set_zoom_axis(&self, axis: ZoomAxis);

    fn connect_zoom<F: Fn(&Self, &Actor, &Point, f64) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_zoom_axis_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ZoomAction>> ZoomActionExt for O {
    fn get_focal_point(&self) -> Point {
        unsafe {
            let mut point = Point::uninitialized();
            ffi::clutter_zoom_action_get_focal_point(
                self.as_ref().to_glib_none().0,
                point.to_glib_none_mut().0,
            );
            point
        }
    }

    fn get_transformed_focal_point(&self) -> Point {
        unsafe {
            let mut point = Point::uninitialized();
            ffi::clutter_zoom_action_get_transformed_focal_point(
                self.as_ref().to_glib_none().0,
                point.to_glib_none_mut().0,
            );
            point
        }
    }

    fn get_zoom_axis(&self) -> ZoomAxis {
        unsafe {
            from_glib(ffi::clutter_zoom_action_get_zoom_axis(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_zoom_axis(&self, axis: ZoomAxis) {
        unsafe {
            ffi::clutter_zoom_action_set_zoom_axis(self.as_ref().to_glib_none().0, axis.to_glib());
        }
    }

    fn connect_zoom<F: Fn(&Self, &Actor, &Point, f64) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn zoom_trampoline<P, F: Fn(&P, &Actor, &Point, f64) -> bool + 'static>(
            this: *mut ffi::ClutterZoomAction,
            actor: *mut ffi::ClutterActor,
            focal_point: *mut ffi::ClutterPoint,
            factor: libc::c_double,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean
        where
            P: IsA<ZoomAction>,
        {
            let f: &F = &*(f as *const F);
            f(
                &ZoomAction::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_borrow(actor),
                &from_glib_borrow(focal_point),
                factor,
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"zoom\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    zoom_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_zoom_axis_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_zoom_axis_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::ClutterZoomAction,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<ZoomAction>,
        {
            let f: &F = &*(f as *const F);
            f(&ZoomAction::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::zoom-axis\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_zoom_axis_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ZoomAction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ZoomAction")
    }
}

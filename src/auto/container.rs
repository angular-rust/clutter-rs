// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use super::Actor;
use super::ChildMeta;

glib_wrapper! {
    pub struct Container(Interface<ffi::ClutterContainer>);

    match fn {
        get_type => || ffi::clutter_container_get_type(),
    }
}

impl Container {
    //pub fn class_find_child_property(klass: /*Ignored*/&mut glib::ObjectClass, property_name: &str) -> /*Ignored*/Option<glib::ParamSpec> {
    //    unsafe { TODO: call clutter_sys:clutter_container_class_find_child_property() }
    //}

    //pub fn class_list_child_properties(klass: /*Ignored*/&mut glib::ObjectClass) -> /*Ignored*/Vec<glib::ParamSpec> {
    //    unsafe { TODO: call clutter_sys:clutter_container_class_list_child_properties() }
    //}
}

pub const NONE_CONTAINER: Option<&Container> = None;

pub trait ContainerExt: 'static {
    //fn child_get<P: IsA<Actor>>(&self, actor: &P, first_prop: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs);

    //fn child_get_property<P: IsA<Actor>>(&self, child: &P, property: &str, value: /*Ignored*/&mut glib::Value);

    //fn child_set<P: IsA<Actor>>(&self, actor: &P, first_prop: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs);

    //fn child_set_property<P: IsA<Actor>>(&self, child: &P, property: &str, value: /*Ignored*/&glib::Value);

    fn create_child_meta<P: IsA<Actor>>(&self, actor: &P);

    fn destroy_child_meta<P: IsA<Actor>>(&self, actor: &P);

    fn find_child_by_name(&self, child_name: &str) -> Option<Actor>;

    fn get_child_meta<P: IsA<Actor>>(&self, actor: &P) -> Option<ChildMeta>;

    fn connect_actor_added<F: Fn(&Self, &Actor) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_actor_removed<F: Fn(&Self, &Actor) + 'static>(&self, f: F) -> SignalHandlerId;

    //fn connect_child_notify<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Container>> ContainerExt for O {
    //fn child_get<P: IsA<Actor>>(&self, actor: &P, first_prop: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call clutter_sys:clutter_container_child_get() }
    //}

    //fn child_get_property<P: IsA<Actor>>(&self, child: &P, property: &str, value: /*Ignored*/&mut glib::Value) {
    //    unsafe { TODO: call clutter_sys:clutter_container_child_get_property() }
    //}

    //fn child_set<P: IsA<Actor>>(&self, actor: &P, first_prop: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call clutter_sys:clutter_container_child_set() }
    //}

    //fn child_set_property<P: IsA<Actor>>(&self, child: &P, property: &str, value: /*Ignored*/&glib::Value) {
    //    unsafe { TODO: call clutter_sys:clutter_container_child_set_property() }
    //}

    fn create_child_meta<P: IsA<Actor>>(&self, actor: &P) {
        unsafe {
            ffi::clutter_container_create_child_meta(
                self.as_ref().to_glib_none().0,
                actor.as_ref().to_glib_none().0,
            );
        }
    }

    fn destroy_child_meta<P: IsA<Actor>>(&self, actor: &P) {
        unsafe {
            ffi::clutter_container_destroy_child_meta(
                self.as_ref().to_glib_none().0,
                actor.as_ref().to_glib_none().0,
            );
        }
    }

    fn find_child_by_name(&self, child_name: &str) -> Option<Actor> {
        unsafe {
            from_glib_none(ffi::clutter_container_find_child_by_name(
                self.as_ref().to_glib_none().0,
                child_name.to_glib_none().0,
            ))
        }
    }

    fn get_child_meta<P: IsA<Actor>>(&self, actor: &P) -> Option<ChildMeta> {
        unsafe {
            from_glib_none(ffi::clutter_container_get_child_meta(
                self.as_ref().to_glib_none().0,
                actor.as_ref().to_glib_none().0,
            ))
        }
    }

    fn connect_actor_added<F: Fn(&Self, &Actor) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn actor_added_trampoline<P, F: Fn(&P, &Actor) + 'static>(
            this: *mut ffi::ClutterContainer,
            actor: *mut ffi::ClutterActor,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Container>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Container::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_borrow(actor),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"actor-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    actor_added_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_actor_removed<F: Fn(&Self, &Actor) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn actor_removed_trampoline<P, F: Fn(&P, &Actor) + 'static>(
            this: *mut ffi::ClutterContainer,
            actor: *mut ffi::ClutterActor,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Container>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Container::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_borrow(actor),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"actor-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    actor_removed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    //fn connect_child_notify<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored pspec: GObject.ParamSpec
    //}
}

impl fmt::Display for Container {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Container")
    }
}

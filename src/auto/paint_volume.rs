// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use super::Actor;
use super::ActorBox;
use super::Vertex;
use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct PaintVolume(Boxed<ffi::ClutterPaintVolume>);

    match fn {
        copy => |ptr| ffi::clutter_paint_volume_copy(mut_override(ptr)),
        free => |ptr| ffi::clutter_paint_volume_free(ptr),
        get_type => || ffi::clutter_paint_volume_get_type(),
    }
}

impl PaintVolume {
    pub fn get_depth(&self) -> f32 {
        unsafe { ffi::clutter_paint_volume_get_depth(self.to_glib_none().0) }
    }

    pub fn get_height(&self) -> f32 {
        unsafe { ffi::clutter_paint_volume_get_height(self.to_glib_none().0) }
    }

    pub fn get_origin(&self) -> Vertex {
        unsafe {
            let mut vertex = Vertex::uninitialized();
            ffi::clutter_paint_volume_get_origin(
                self.to_glib_none().0,
                vertex.to_glib_none_mut().0,
            );
            vertex
        }
    }

    pub fn get_width(&self) -> f32 {
        unsafe { ffi::clutter_paint_volume_get_width(self.to_glib_none().0) }
    }

    pub fn set_depth(&mut self, depth: f32) {
        unsafe {
            ffi::clutter_paint_volume_set_depth(self.to_glib_none_mut().0, depth);
        }
    }

    pub fn set_from_allocation<P: IsA<Actor>>(&mut self, actor: &P) -> bool {
        unsafe {
            from_glib(ffi::clutter_paint_volume_set_from_allocation(
                self.to_glib_none_mut().0,
                actor.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn set_height(&mut self, height: f32) {
        unsafe {
            ffi::clutter_paint_volume_set_height(self.to_glib_none_mut().0, height);
        }
    }

    pub fn set_origin(&mut self, origin: &Vertex) {
        unsafe {
            ffi::clutter_paint_volume_set_origin(
                self.to_glib_none_mut().0,
                origin.to_glib_none().0,
            );
        }
    }

    pub fn set_width(&mut self, width: f32) {
        unsafe {
            ffi::clutter_paint_volume_set_width(self.to_glib_none_mut().0, width);
        }
    }

    pub fn union(&mut self, another_pv: &PaintVolume) {
        unsafe {
            ffi::clutter_paint_volume_union(self.to_glib_none_mut().0, another_pv.to_glib_none().0);
        }
    }

    pub fn union_box(&mut self, box_: &ActorBox) {
        unsafe {
            ffi::clutter_paint_volume_union_box(self.to_glib_none_mut().0, box_.to_glib_none().0);
        }
    }
}

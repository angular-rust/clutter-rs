// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use super::Action;
use super::Actor;
use super::ActorMeta;
use super::GestureAction;
use super::SwipeDirection;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct SwipeAction(Object<ffi::ClutterSwipeAction, ffi::ClutterSwipeActionClass, SwipeActionClass>) @extends GestureAction, Action, ActorMeta;

    match fn {
        get_type => || ffi::clutter_swipe_action_get_type(),
    }
}

impl SwipeAction {
    pub fn new() -> SwipeAction {
        assert_initialized_main_thread!();
        unsafe { Action::from_glib_none(ffi::clutter_swipe_action_new()).unsafe_cast() }
    }
}

impl Default for SwipeAction {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SWIPE_ACTION: Option<&SwipeAction> = None;

pub trait SwipeActionExt: 'static {
    fn connect_swipe<F: Fn(&Self, &Actor, SwipeDirection) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<SwipeAction>> SwipeActionExt for O {
    fn connect_swipe<F: Fn(&Self, &Actor, SwipeDirection) -> bool + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn swipe_trampoline<
            P,
            F: Fn(&P, &Actor, SwipeDirection) -> bool + 'static,
        >(
            this: *mut ffi::ClutterSwipeAction,
            actor: *mut ffi::ClutterActor,
            direction: ffi::ClutterSwipeDirection,
            f: glib_sys::gpointer,
        ) -> glib_sys::gboolean
        where
            P: IsA<SwipeAction>,
        {
            let f: &F = &*(f as *const F);
            f(
                &SwipeAction::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_borrow(actor),
                from_glib(direction),
            )
            .to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"swipe\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    swipe_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SwipeAction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SwipeAction")
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use super::ActorMeta;
use super::Effect;
use super::OffscreenEffect;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib_wrapper! {
    pub struct DeformEffect(Object<ffi::ClutterDeformEffect, ffi::ClutterDeformEffectClass, DeformEffectClass>) @extends OffscreenEffect, Effect, ActorMeta;

    match fn {
        get_type => || ffi::clutter_deform_effect_get_type(),
    }
}

pub const NONE_DEFORM_EFFECT: Option<&DeformEffect> = None;

pub trait DeformEffectExt: 'static {
    //fn get_back_material(&self) -> /*Unimplemented*/Option<cogl::Handle>;

    fn get_n_tiles(&self) -> (u32, u32);

    fn invalidate(&self);

    //fn set_back_material(&self, material: /*Unimplemented*/Option<cogl::Handle>);

    fn set_n_tiles(&self, x_tiles: u32, y_tiles: u32);

    fn get_property_x_tiles(&self) -> u32;

    fn set_property_x_tiles(&self, x_tiles: u32);

    fn get_property_y_tiles(&self) -> u32;

    fn set_property_y_tiles(&self, y_tiles: u32);

    fn connect_property_x_tiles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_y_tiles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DeformEffect>> DeformEffectExt for O {
    //fn get_back_material(&self) -> /*Unimplemented*/Option<cogl::Handle> {
    //    unsafe { TODO: call clutter_sys:clutter_deform_effect_get_back_material() }
    //}

    fn get_n_tiles(&self) -> (u32, u32) {
        unsafe {
            let mut x_tiles = mem::MaybeUninit::uninit();
            let mut y_tiles = mem::MaybeUninit::uninit();
            ffi::clutter_deform_effect_get_n_tiles(
                self.as_ref().to_glib_none().0,
                x_tiles.as_mut_ptr(),
                y_tiles.as_mut_ptr(),
            );
            let x_tiles = x_tiles.assume_init();
            let y_tiles = y_tiles.assume_init();
            (x_tiles, y_tiles)
        }
    }

    fn invalidate(&self) {
        unsafe {
            ffi::clutter_deform_effect_invalidate(self.as_ref().to_glib_none().0);
        }
    }

    //fn set_back_material(&self, material: /*Unimplemented*/Option<cogl::Handle>) {
    //    unsafe { TODO: call clutter_sys:clutter_deform_effect_set_back_material() }
    //}

    fn set_n_tiles(&self, x_tiles: u32, y_tiles: u32) {
        unsafe {
            ffi::clutter_deform_effect_set_n_tiles(
                self.as_ref().to_glib_none().0,
                x_tiles,
                y_tiles,
            );
        }
    }

    fn get_property_x_tiles(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"x-tiles\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `x-tiles` getter")
                .unwrap()
        }
    }

    fn set_property_x_tiles(&self, x_tiles: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"x-tiles\0".as_ptr() as *const _,
                Value::from(&x_tiles).to_glib_none().0,
            );
        }
    }

    fn get_property_y_tiles(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"y-tiles\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `y-tiles` getter")
                .unwrap()
        }
    }

    fn set_property_y_tiles(&self, y_tiles: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"y-tiles\0".as_ptr() as *const _,
                Value::from(&y_tiles).to_glib_none().0,
            );
        }
    }

    fn connect_property_x_tiles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_x_tiles_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::ClutterDeformEffect,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<DeformEffect>,
        {
            let f: &F = &*(f as *const F);
            f(&DeformEffect::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::x-tiles\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_x_tiles_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_y_tiles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_y_tiles_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::ClutterDeformEffect,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<DeformEffect>,
        {
            let f: &F = &*(f as *const F);
            f(&DeformEffect::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::y-tiles\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_y_tiles_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DeformEffect {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DeformEffect")
    }
}

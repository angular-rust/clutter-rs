// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use cogl;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use super::Color;
use super::PaintNode;
use super::PipelineNode;
use super::ScalingFilter;

glib_wrapper! {
    pub struct TextureNode(Object<ffi::ClutterTextureNode, ffi::ClutterTextureNodeClass, TextureNodeClass>) @extends PipelineNode, PaintNode;

    match fn {
        get_type => || ffi::clutter_texture_node_get_type(),
    }
}

impl TextureNode {
    pub fn new<P: IsA<cogl::Texture>>(
        texture: &P,
        color: Option<&Color>,
        min_filter: ScalingFilter,
        mag_filter: ScalingFilter,
    ) -> TextureNode {
        assert_initialized_main_thread!();
        unsafe {
            PaintNode::from_glib_full(ffi::clutter_texture_node_new(
                texture.as_ref().to_glib_none().0,
                color.to_glib_none().0,
                min_filter.to_glib(),
                mag_filter.to_glib(),
            ))
            .unsafe_cast()
        }
    }
}

impl fmt::Display for TextureNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TextureNode")
    }
}

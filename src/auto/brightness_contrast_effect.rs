// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use super::ActorMeta;
use super::Effect;
use super::OffscreenEffect;
use ffi;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib_wrapper! {
    pub struct BrightnessContrastEffect(Object<ffi::ClutterBrightnessContrastEffect, ffi::ClutterBrightnessContrastEffectClass, BrightnessContrastEffectClass>) @extends OffscreenEffect, Effect, ActorMeta;

    match fn {
        get_type => || ffi::clutter_brightness_contrast_effect_get_type(),
    }
}

impl BrightnessContrastEffect {
    pub fn new() -> BrightnessContrastEffect {
        assert_initialized_main_thread!();
        unsafe {
            Effect::from_glib_full(ffi::clutter_brightness_contrast_effect_new()).unsafe_cast()
        }
    }

    pub fn get_brightness(&self) -> (f32, f32, f32) {
        unsafe {
            let mut red = mem::MaybeUninit::uninit();
            let mut green = mem::MaybeUninit::uninit();
            let mut blue = mem::MaybeUninit::uninit();
            ffi::clutter_brightness_contrast_effect_get_brightness(
                self.to_glib_none().0,
                red.as_mut_ptr(),
                green.as_mut_ptr(),
                blue.as_mut_ptr(),
            );
            let red = red.assume_init();
            let green = green.assume_init();
            let blue = blue.assume_init();
            (red, green, blue)
        }
    }

    pub fn get_contrast(&self) -> (f32, f32, f32) {
        unsafe {
            let mut red = mem::MaybeUninit::uninit();
            let mut green = mem::MaybeUninit::uninit();
            let mut blue = mem::MaybeUninit::uninit();
            ffi::clutter_brightness_contrast_effect_get_contrast(
                self.to_glib_none().0,
                red.as_mut_ptr(),
                green.as_mut_ptr(),
                blue.as_mut_ptr(),
            );
            let red = red.assume_init();
            let green = green.assume_init();
            let blue = blue.assume_init();
            (red, green, blue)
        }
    }

    pub fn set_brightness(&self, brightness: f32) {
        unsafe {
            ffi::clutter_brightness_contrast_effect_set_brightness(
                self.to_glib_none().0,
                brightness,
            );
        }
    }

    pub fn set_brightness_full(&self, red: f32, green: f32, blue: f32) {
        unsafe {
            ffi::clutter_brightness_contrast_effect_set_brightness_full(
                self.to_glib_none().0,
                red,
                green,
                blue,
            );
        }
    }

    pub fn set_contrast(&self, contrast: f32) {
        unsafe {
            ffi::clutter_brightness_contrast_effect_set_contrast(self.to_glib_none().0, contrast);
        }
    }

    pub fn set_contrast_full(&self, red: f32, green: f32, blue: f32) {
        unsafe {
            ffi::clutter_brightness_contrast_effect_set_contrast_full(
                self.to_glib_none().0,
                red,
                green,
                blue,
            );
        }
    }

    pub fn connect_property_brightness_notify<F: Fn(&BrightnessContrastEffect) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_brightness_trampoline<
            F: Fn(&BrightnessContrastEffect) + 'static,
        >(
            this: *mut ffi::ClutterBrightnessContrastEffect,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::brightness\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_brightness_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_contrast_notify<F: Fn(&BrightnessContrastEffect) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_contrast_trampoline<
            F: Fn(&BrightnessContrastEffect) + 'static,
        >(
            this: *mut ffi::ClutterBrightnessContrastEffect,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::contrast\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_contrast_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for BrightnessContrastEffect {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for BrightnessContrastEffect {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "BrightnessContrastEffect")
    }
}

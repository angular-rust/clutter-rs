// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use super::StaticColor;
use ffi;
use glib::translate::*;
use glib::GString;
use std::fmt;
use std::mem;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Color(Boxed<ffi::ClutterColor>);

    match fn {
        copy => |ptr| ffi::clutter_color_copy(mut_override(ptr)),
        free => |ptr| ffi::clutter_color_free(ptr),
        get_type => || ffi::clutter_color_get_type(),
    }
}

impl Color {
    pub fn alloc() -> Color {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::clutter_color_alloc()) }
    }

    pub fn new(red: u8, green: u8, blue: u8, alpha: u8) -> Color {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::clutter_color_new(red, green, blue, alpha)) }
    }

    pub fn add(&self, b: &Color) -> Color {
        unsafe {
            let mut result = Color::uninitialized();
            ffi::clutter_color_add(
                self.to_glib_none().0,
                b.to_glib_none().0,
                result.to_glib_none_mut().0,
            );
            result
        }
    }

    pub fn darken(&self) -> Color {
        unsafe {
            let mut result = Color::uninitialized();
            ffi::clutter_color_darken(self.to_glib_none().0, result.to_glib_none_mut().0);
            result
        }
    }

    pub fn init(&mut self, red: u8, green: u8, blue: u8, alpha: u8) -> Option<Color> {
        unsafe {
            from_glib_none(ffi::clutter_color_init(
                self.to_glib_none_mut().0,
                red,
                green,
                blue,
                alpha,
            ))
        }
    }

    pub fn interpolate(&self, final_: &Color, progress: f64) -> Color {
        unsafe {
            let mut result = Color::uninitialized();
            ffi::clutter_color_interpolate(
                self.to_glib_none().0,
                final_.to_glib_none().0,
                progress,
                result.to_glib_none_mut().0,
            );
            result
        }
    }

    pub fn lighten(&self) -> Color {
        unsafe {
            let mut result = Color::uninitialized();
            ffi::clutter_color_lighten(self.to_glib_none().0, result.to_glib_none_mut().0);
            result
        }
    }

    pub fn shade(&self, factor: f64) -> Color {
        unsafe {
            let mut result = Color::uninitialized();
            ffi::clutter_color_shade(self.to_glib_none().0, factor, result.to_glib_none_mut().0);
            result
        }
    }

    pub fn subtract(&self, b: &Color) -> Color {
        unsafe {
            let mut result = Color::uninitialized();
            ffi::clutter_color_subtract(
                self.to_glib_none().0,
                b.to_glib_none().0,
                result.to_glib_none_mut().0,
            );
            result
        }
    }

    pub fn to_hls(&self) -> (f32, f32, f32) {
        unsafe {
            let mut hue = mem::MaybeUninit::uninit();
            let mut luminance = mem::MaybeUninit::uninit();
            let mut saturation = mem::MaybeUninit::uninit();
            ffi::clutter_color_to_hls(
                self.to_glib_none().0,
                hue.as_mut_ptr(),
                luminance.as_mut_ptr(),
                saturation.as_mut_ptr(),
            );
            let hue = hue.assume_init();
            let luminance = luminance.assume_init();
            let saturation = saturation.assume_init();
            (hue, luminance, saturation)
        }
    }

    pub fn to_pixel(&self) -> u32 {
        unsafe { ffi::clutter_color_to_pixel(self.to_glib_none().0) }
    }

    fn to_string(&self) -> GString {
        unsafe { from_glib_full(ffi::clutter_color_to_string(self.to_glib_none().0)) }
    }

    pub fn from_hls(hue: f32, luminance: f32, saturation: f32) -> Color {
        assert_initialized_main_thread!();
        unsafe {
            let mut color = Color::uninitialized();
            ffi::clutter_color_from_hls(color.to_glib_none_mut().0, hue, luminance, saturation);
            color
        }
    }

    pub fn from_pixel(pixel: u32) -> Color {
        assert_initialized_main_thread!();
        unsafe {
            let mut color = Color::uninitialized();
            ffi::clutter_color_from_pixel(color.to_glib_none_mut().0, pixel);
            color
        }
    }

    pub fn from_string(str: &str) -> Option<Color> {
        assert_initialized_main_thread!();
        unsafe {
            let mut color = Color::uninitialized();
            let ret = from_glib(ffi::clutter_color_from_string(
                color.to_glib_none_mut().0,
                str.to_glib_none().0,
            ));
            if ret {
                Some(color)
            } else {
                None
            }
        }
    }

    pub fn get_static(color: StaticColor) -> Option<Color> {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::clutter_color_get_static(color.to_glib())) }
    }
}

impl fmt::Display for Color {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.to_string())
    }
}

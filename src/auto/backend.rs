// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use cairo;
use ffi;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Backend(Object<ffi::ClutterBackend, ffi::ClutterBackendClass, BackendClass>);

    match fn {
        get_type => || ffi::clutter_backend_get_type(),
    }
}

impl Backend {
    pub fn get_font_options(&self) -> Option<cairo::FontOptions> {
        unsafe { from_glib_none(ffi::clutter_backend_get_font_options(self.to_glib_none().0)) }
    }

    pub fn get_resolution(&self) -> f64 {
        unsafe { ffi::clutter_backend_get_resolution(self.to_glib_none().0) }
    }

    pub fn set_font_options(&self, options: &cairo::FontOptions) {
        unsafe {
            ffi::clutter_backend_set_font_options(self.to_glib_none().0, options.to_glib_none().0);
        }
    }

    pub fn connect_font_changed<F: Fn(&Backend) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn font_changed_trampoline<F: Fn(&Backend) + 'static>(
            this: *mut ffi::ClutterBackend,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"font-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    font_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_resolution_changed<F: Fn(&Backend) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn resolution_changed_trampoline<F: Fn(&Backend) + 'static>(
            this: *mut ffi::ClutterBackend,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"resolution-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    resolution_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_settings_changed<F: Fn(&Backend) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn settings_changed_trampoline<F: Fn(&Backend) + 'static>(
            this: *mut ffi::ClutterBackend,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"settings-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    settings_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Backend {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Backend")
    }
}
